generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  fullName            String
  avatar              String
  balance             Int                   @default(0)
  role                Role                  @default(user)
  refreshToken        String?
  token               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  loadBalance         LoadBalance[]
  order               ffOrder[]
  ffTournament        ffTournament[]
  enteredFfTournament enteredFfTournament[]
  notification        notification[]
  exChangeCoin        exChangeCoin[]
}

model LoadBalance {
  id                String   @id @default(cuid())
  paymentScreenshot String
  amount            Int
  status            Status   @default(pending)
  message           String   @default("Your coin is being processed.Your collect coin will be updated shortly")
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

model exChangeCoin {
  id           String @id @default(cuid())
  qrScreenshot String
  amount       Int
  status       Status @default(pending)
  message      String @default("Your coin is being processed.Your collect coin will be updated ")
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model ffOrder {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  ffUid        String
  ffName       String
  diamondPrice Int
  diamondTitle String
  status       Status   @default(pending)
  message      String   @default("Your ff topup order is being processed.")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model ffTopUpRate {
  id           Int @id @default(autoincrement())
  diamondTitle String
  price        Float
  realPrice    Float?
}

model ffTournament {
  id                  String                @id @default(cuid())
  title               String
  time                DateTime              @db.Timestamp(6)
  owner               String
  creator             User                  @relation(fields: [userId], references: [id])
  userId              String
  ammo                Boolean               @default(false)
  skill               Boolean               @default(false)
  reward              Int                   @default(0)
  cost                Int                   @default(0)
  roomId              String?
  password            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  enteredFfTournament enteredFfTournament[]
}

model enteredFfTournament {
  id           String       @id @default(cuid())
  fftournament ffTournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  gameName     String
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  isWinner     Boolean      @default(false)
  status       Status       @default(pending)
  message      String       @default("Your tournament is being processed Enter at the time.")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
}

model notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  status    Status   @default(started)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  user
  admin
  subadmin
}

enum Status {
  pending
  approved
  delivered
  rejected
  started
  cancel
  completed
}
